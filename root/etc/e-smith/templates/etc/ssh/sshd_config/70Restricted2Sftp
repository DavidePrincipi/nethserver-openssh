{
    # restrict groups to sftp, ssh access is refused
    my $domain = $DomainName;
    my @SftpRestricted = ();

    my $admins_group = $admins{'group'} || 'domain admins';

    foreach ( $admins_group, split(',',$sshd{'AllowGroups'} || '')) {
        my ($group, $sftp) = split(':', $_);
        if(!$group) {
            next;
        }
        if (!$sftp) {
            $sftp = '';
        }

        $group .= "\@$domain" if ($group !~ '@');
        if ($sftp eq 'sftp') {
            push @SftpRestricted, $group;
        } else {
            # do not force SFTP to groups with SSH permission
            push @SftpRestricted, '!'.$group;
       }
    }

    if (grep {$_ eq "Everyone\@$domain"} @SftpRestricted) {
        # We allow to everyone, each group is listed if starts by `!`
        @SftpUnRestricted = join (',',grep { $_ =~ /^!/ } @SftpRestricted);
        # The condition must match the group
        map {s/!//g; } @SftpUnRestricted;
        $OUT .= "Match Group \"@SftpUnRestricted,root\"\n";
        $OUT .= "    ForceCommand none\n";
        $OUT .= "Match All\n";
        $OUT .= "    ForceCommand internal-sftp\n";
    } elsif (@SftpRestricted) {
        # Everyone is not restricted to SFTP
        @SftpRestricted = grep { $_ ne "!Everyone\@$domain" } @SftpRestricted;
        my $matchGroup = join (",",@SftpRestricted);
        $OUT .= "Match Group \"$matchGroup\"\n";
        $OUT .= "    ForceCommand internal-sftp\n";
        $OUT .= "Match All\n";
    } else {
        $OUT .= "# We have no groups restricted to sftp";
    }
}
